plugins {
    id "com.dorongold.task-tree" version "1.3.1"
    id "com.github.node-gradle.node" version "2.2.0"
}

wrapper {
    gradleVersion "5.1"
    distributionType Wrapper.DistributionType.BIN
}

node {
    version = "10.15.0"
    npmVersion = "6.7.0"
    download = true
    nodeModulesDir = file("${project.projectDir}")
}

ext {
    npmBin = "${projectDir}/node_modules/.bin"
}

task clean(type: NodeTask) {
    dependsOn npmInstall

    script = file("${npmBin}/rimraf")
    args = "es lib dist".tokenize()
}

task format(type: NodeTask) {
    dependsOn npmInstall

    script = file("${npmBin}/prettier")
    args = "--write src/**/*.ts".tokenize()
}

task generateTypes(type: NodeTask) {
    dependsOn npmInstall

    script = file("${npmBin}/tsc")
    args = "-p tsconfig.base.json --emitDeclarationOnly".tokenize()
}

task lint(type: NodeTask) {
    dependsOn npmInstall

    script = file("${npmBin}/eslint")
    args = ["src/**/*.ts", "src/**/*.tsx"]
}

task test(type: NodeTask) {
    dependsOn npmInstall

    script = file("${npmBin}/jest")
    args = "src/**/*.test.ts".tokenize()
}

task typeCheck(type: NodeTask) {
    dependsOn npmInstall

    script = file("${npmBin}/tsc")
    args = "-p tsconfig.json --noEmit".tokenize()
}


///////////////////////////
// Build
//////////////////////////
task bundle(type: NodeTask) {
    dependsOn npmInstall

    environment = [BABEL_ENV: "es", NODE_ENV: "production"]
    script = file("${npmBin}/webpack")
    args = "--config webpack.config.js".tokenize()
}

task processCSS(type: NodeTask) {
    dependsOn npmInstall

    script = file("${npmBin}/postcss")
    args = "src/viewport/index.css --output style/style.css".tokenize()
}

task devCSS(type: NodeTask) {
    dependsOn npmInstall

    script = file("${npmBin}/postcss")
    args = "src/viewport/index.css --output examples/style.css".tokenize()
}

task transpileES(type: NodeTask) {
    dependsOn npmInstall

    environment = [TS_NODE_PROJECT: "tsconfig.es.json", BABEL_ENV: "es"]
    script = file("${npmBin}/babel")
    args = "src --out-dir es --extensions .ts,.tsx --ignore src/**/*.test.ts".tokenize()
}

task transpileCommonJs(type: NodeTask) {
    dependsOn npmInstall

    environment = [TS_NODE_PROJECT: "tsconfig.commonjs.json"]
    script = file("${npmBin}/babel")
    args = "src --out-dir lib --extensions .ts,.tsx --ignore src/**/*.test.ts".tokenize()
}

task build {
    dependsOn generateTypes, bundle, transpileES, transpileCommonJs, processCSS
}

task start(type: NodeTask) {
    dependsOn devCSS, bundle
    environment = [NODE_ENV: "dev"]

    script = file("${npmBin}/webpack-dev-server")
    args = "--config webpack.dev.js".tokenize()
}